Представьте, что вы работаете в стартапе, который запустил интернет-магазин. Ваш интернет-магазин достаточно успешно развивался, и вот пришло время налаживать процессы: у вас стало больше конечных клиентов, менеджеров и разработчиков.Сейчас от клиентов вам приходят задачи, связанные с разработкой нового функционала. Задач много, и все они требуют выкладки на тестовые среды, одобрения тестировщика, проверки менеджером перед показом клиенту. В случае необходимости, вам будет необходим откат изменений.

Решение задачи Вам необходимо описать процесс решения задачи в соответствии с жизненным циклом разработки программного обеспечения. Использование какого-либо конкретного метода разработки не обязательно. Для решения главное - прописать по пунктам шаги решения задачи (релизации в конечный результат) с участием менеджера, разработчика (или команды разработчиков), тестировщика (или команды тестировщиков) и себя как DevOps-инженера.

Решение:

Нужно автоматизировать процесс обработки задач, т.е. предоставить проектной команде условия для комфортного прохождения задачей всех инстанций начиная от ресурсного планирования и аналитики, заканчивая тестированием и выпуском на продуктовые площадки готовых фич или исправленных дефектов. В данном случае хорошо подходят такие инструменты как Atlassian JIRA или YouTrack.

Необходимо скоординироваться с отделом разработки по используемым технологиям. Необходимо согласовать набор технологий используемых разработчиками дабы корректно установить этот набор на исполняемых агентах. Также для разработчиков необходимо подготовить системы хранения кода и контроля версий, а также системы контроля качества кода и хранения версий приложения, готовых в любой момент быть использованными на площадках.

Нужно подготовить схему тестирования и согласованного развертывания тестовых площадок в зависимости от ресурсов, а также согласованного отката. Полноценную схему тестирования стоит разрабатывать исходя из наличия/отсутствия отдела тестирования, наличия тех или иных видов тестов.

Нужно подготовить схему согласованного развертывания пред-релизных и релизных версий приложения, а также отката. Для качественного CI/CD процесса можно использовать готовые решения, такие как TeamCity. С его помощью можно автоматизировать процесс сьема свежих снэпшотов кода и последующее их развертывание на серверах. Также такие инструменты позволяют грамотно выбрать стратегию развертывания исходя из ресурсов компании, делая такие вещи быстрыми в конфигурировании.

Для всех площадок необходимо настроить процесс мониторинга. В качестве мониторингового инструмента можно использовать все более популярный в данное время ELK стэк, позволяющий не только агрегировать различные данные из разных источников, в случаях развертывания крупномасштабных систем, но также позволяет анализировать и простраивать корреляции между различными метриками поступающими в ходе работы приложения. Стоит отметить что данный стэк также отлично масштабируется, что может принести сокращение расходов в будущем.

В целом такой процесс напрямую зависит от возможностей компании и тут скорее нужно искать золотую середину между качеством процесса и качеством продукта на выходе. Очень часто идеализация процесса приводит к появлению все новых и новых задач по приведению уже не работающей модели к старому "идеальному" шаблону. Поэтому это очень размытый вопрос и такой же получился ответ :)